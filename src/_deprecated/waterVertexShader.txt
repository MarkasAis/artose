#version 400 core

in vec3 position;

out vec3 toCamera;
out vec3 lightDirection;

out vec4 lodAlpha_worldXZUndisplaced_oceanDepth;

uniform mat4 transformationMatrix;
uniform mat4 viewMatrix;
uniform mat4 projectionMatrix;

const vec3 lightPosition = vec3(10, 100, 10);

void main(void) {
	vec4 worldPosition = transformationMatrix * vec4(position.x, position.y, position.z, 1);
	vec4 positionRelativeToCamera = viewMatrix * worldPosition;

	toCamera = (inverse(viewMatrix) * vec4(0, 0, 0, 1)).xyz - worldPosition.xyz;

	lightDirection = normalize(lightPosition - position);

	lodAlpha_worldXZUndisplaced_oceanDepth.x = 1;
	lodAlpha_worldXZUndisplaced_oceanDepth.yz = worldPosition.xz;
	lodAlpha_worldXZUndisplaced_oceanDepth.w = 0;

	gl_Position = projectionMatrix * positionRelativeToCamera;
}