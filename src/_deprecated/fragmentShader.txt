#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2DArray textureSampler;
uniform vec3 lightColor;
uniform float shineDamper;
uniform float reflectivity;

uniform vec3 skyColor;

void main(void) {
	out_Color = texture(textureSampler, vec3(pass_textureCoords, 5));
	//out_Color = vec4(1,0,0,1);
	return;

	/*vec3 unitNormal = normalize(surfaceNormal);
	vec3 unitToLightVector = normalize(toLightVector);

	float brightness = max(dot(unitNormal, unitToLightVector), 0.2);
	vec3 diffuse = lightColor * brightness;

	vec3 unitToCameraVector = normalize(toCameraVector);
	vec3 lightDirection = -toLightVector;
	vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);

	float specularFactor = max(dot(reflectedLightDirection, unitToCameraVector), 0);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 specular = lightColor * dampedFactor * reflectivity;
 
 	vec4 textureColor = texture(textureSampler, pass_textureCoords);
	if (textureColor.a < 0.5) {
		discard;
	}

	out_Color = vec4(diffuse, 1) * textureColor + vec4(specular, 1);
	out_Color = mix(vec4(skyColor, 1), out_Color, visibility);*/
}